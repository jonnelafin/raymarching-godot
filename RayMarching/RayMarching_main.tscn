[gd_scene load_steps=6 format=2]

[ext_resource path="res://RayMarching/ColorRect.gd" type="Script" id=1]
[ext_resource path="res://RayMarching/CameraMovement.gd" type="Script" id=2]
[ext_resource path="res://RayMarching/FovSlider.gd" type="Script" id=3]

[sub_resource type="Shader" id=1]
code = "// \"ShaderToy Tutorial - Ray Marching Primitives\" 
// by Martijn Steinrucken aka BigWings/CountFrolic - 2018
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// This shader is part of a tutorial on YouTube
// https://youtu.be/Ff0jJyyiVyw
shader_type canvas_item;
uniform int MAX_STEPS = 100;
uniform float MAX_DIST = 100;
uniform float SURF_DIST = .001;
uniform float iTime;
uniform vec2 iResolution;

uniform float fov = 45.0;
uniform vec3 cameraPos = vec3(-5.0, 0.0, 0.0);
uniform vec3 front = vec3(1.0, 0.0, 0.0);
uniform vec3 up = vec3(0.0, 1.0, 0.0);

float sdCapsule(vec3 p, vec3 a, vec3 b, float r) {
	vec3 ab = b-a;
    vec3 ap = p-a;
    
    float t = dot(ab, ap) / dot(ab, ab);
    t = clamp(t, 0., 1.);
    
    vec3 c = a + t*ab;
    
    return length(p-c)-r;
}

float sdCylinder(vec3 p, vec3 a, vec3 b, float r) {
	vec3 ab = b-a;
    vec3 ap = p-a;
    
    float t = dot(ab, ap) / dot(ab, ab);
    //t = clamp(t, 0., 1.);
    
    vec3 c = a + t*ab;
    
    float x = length(p-c)-r;
    float y = (abs(t-.5)-.5)*length(ab);
    float e = length(max(vec2(x, y), 0.));
    float i = min(max(x, y), 0.);
    
    return e+i;
}

float sdTorus(vec3 p, vec2 r) {
	float x = length(p.xz)-r.x;
    return length(vec2(x, p.y))-r.y;
}

float dBox(vec3 p, vec3 s) {
	return length(max(abs(p)-s, 0.));
}


float GetDist(vec3 p) {
	vec4 s = vec4(0, 1, 6, 1);
    
    float sphereDist =  length(p-s.xyz)-s.w;
    float planeDist = p.y;
    
    float cd = sdCapsule(p, vec3(3, .5, 6), vec3(3, 2.5, 6), .5); 
    float td = sdTorus(p-vec3(0,.5,6), vec2(1.5, .4));
    float bd = dBox(p-vec3(-3.5, 1, 6), vec3(1,.75,1));
    float cyld = sdCylinder(p, vec3(0, .3, 3), vec3(3, .3, 5), .3);
    
    float d = min(cd, planeDist);
    d = min(d, td);
    d = min(d, bd);
    
    d = min(d, cyld);
    
    return d;
}

float RayMarch(vec3 ro, vec3 rd) {
	float dO=0.;
    
    for(int i=0; i<MAX_STEPS; i++) {
    	vec3 p = ro + rd*dO;
        float dS = GetDist(p);
        dO += dS;
        if(dO>MAX_DIST || dS<SURF_DIST) break;
    }
    
    return dO;
}

vec3 GetNormal(vec3 p) {
	float d = GetDist(p);
    vec2 e = vec2(.001, 0);
    
    vec3 n = d - vec3(
        GetDist(p-e.xyy),
        GetDist(p-e.yxy),
        GetDist(p-e.yyx));
    
    return normalize(n);
}

float GetLight(vec3 p) {
    vec3 lightPos = vec3(0, 5, 6);
    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;
    vec3 l = normalize(lightPos-p);
    vec3 n = GetNormal(p);
    
    float dif = clamp(dot(n, l), 0., 1.);
    float d = RayMarch(p+n*SURF_DIST*2., l);
    if(d<length(lightPos-p)) dif *= .1;
    
    return dif;
}



vec3 getRayDirection(vec2 resolution, vec2 uv)
{
	float aspect = resolution.x / resolution.y;
	float fov2 = radians(fov) / 2.0;
	
	// convert coordinates from [0, 1] to [-1, 1]
	// and invert y axis to flow from bottom to top
	vec2 screenCoord = (uv - 0.5) * 2.0;
	screenCoord.x *= aspect;
	screenCoord.y = -screenCoord.y;
	
	vec2 offsets = screenCoord * tan(fov2);
	
	vec3 rayFront = normalize(front);
	vec3 rayRight = normalize(cross(rayFront, normalize(up)));
	vec3 rayUp = cross(rayRight, rayFront);
	vec3 rayDir = rayFront + rayRight * offsets.x + rayUp * offsets.y;
	
	return normalize(rayDir);
}

void fragment()
{
	vec2 uv = UV;//(fragCoord-.5*iResolution.xy)/iResolution.y;

	vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;
    vec3 col = vec3(0);
    
    vec3 ro = cameraPos;
    vec3 rd = normalize(vec3(uv.x-.15, uv.y-.2, 1));
	rd = getRayDirection(resolution, UV);
    float d = RayMarch(ro, rd);
    
    vec3 p = ro + rd * d;
    
    float dif = GetLight(p);
    col = vec3(dif);
    
    col = pow(col, vec3(.4545));	// gamma correction
    
    COLOR = vec4(col,1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/MAX_STEPS = 100
shader_param/MAX_DIST = 20.0
shader_param/SURF_DIST = 0.001
shader_param/iTime = null
shader_param/iResolution = null
shader_param/fov = 45.0
shader_param/cameraPos = Vector3( 0, 2, 0 )
shader_param/front = Vector3( 1, 0, 0 )
shader_param/up = Vector3( 0, 1, 0 )

[node name="Node" type="Node"]

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
rect_rotation = -0.042723

[node name="ColorRect" type="ColorRect" parent="Control"]
material = SubResource( 2 )
anchor_right = 1.082
anchor_bottom = 0.903
margin_right = -83.968
margin_bottom = 58.2
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CameraMovement" type="Node" parent="Control/ColorRect"]
script = ExtResource( 2 )

[node name="UI" type="Control" parent="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FovSlider" type="VSlider" parent="Control/UI"]
margin_right = 32.0
margin_bottom = 128.0
min_value = 15.0
max_value = 135.0
step = 0.01
value = 45.0
tick_count = 10
ticks_on_borders = true
script = ExtResource( 3 )
colorRect = NodePath("../../ColorRect")
